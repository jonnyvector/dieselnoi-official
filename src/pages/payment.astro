---
const OMISE_PUBLIC_KEY = import.meta.env.PUBLIC_OMISE_PUBLIC_KEY || 'YOUR_OMISE_PUBLIC_KEY';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<title>Donate - Support Youth Muay Thai | Dieselnoi</title>
		<script src="https://cdn.omise.co/omise.js"></script>
		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				line-height: 1.6;
				color: #333;
				background: #f5f5f5;
				padding: 2rem;
			}

			.payment-container {
				max-width: 600px;
				margin: 0 auto;
				background: white;
				padding: 3rem;
				border: 1px solid #ddd;
				border-radius: 8px;
			}

			h1 {
				font-size: 2rem;
				font-weight: 600;
				color: #333;
				margin-bottom: 2rem;
				text-align: center;
			}

			.preset-amounts {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
				gap: 1rem;
				margin-bottom: 2rem;
			}

			.amount-button {
				font-weight: 500;
				padding: 1.5rem 1rem;
				border: 1px solid #ddd;
				background: white;
				color: #333;
				cursor: pointer;
				transition: all 0.2s;
				font-size: 1rem;
				border-radius: 4px;
			}

			.amount-button:hover {
				background: #f5f5f5;
				border-color: #345E99;
			}

			.amount-button.selected {
				background: #345E99;
				color: white;
				border-color: #345E99;
			}

			.button-conversion {
				font-size: 0.8rem;
				color: #999;
				margin-top: 0.25rem;
			}

			.amount-button.selected .button-conversion {
				color: rgba(255, 255, 255, 0.8);
			}

			.custom-amount-section {
				margin-bottom: 2rem;
			}

			label {
				font-weight: 500;
				color: #333;
				display: block;
				margin-bottom: 0.5rem;
				font-size: 1rem;
			}

			input[type="number"] {
				width: 100%;
				padding: 0.75rem;
				border: 1px solid #ddd;
				font-size: 1rem;
				background: white;
				border-radius: 4px;
			}

			input[type="number"]:focus {
				outline: none;
				border-color: #345E99;
			}

			.selected-amount {
				background: #f9f9f9;
				color: #333;
				padding: 1.5rem;
				margin-bottom: 2rem;
				text-align: center;
				border: 1px solid #ddd;
				border-radius: 4px;
			}

			.selected-amount p {
				font-size: 0.9rem;
				margin-bottom: 0.5rem;
				color: #666;
			}

			.selected-amount .amount {
				font-size: 2rem;
				font-weight: 600;
				color: #345E99;
			}

			.converted-amount {
				font-size: 0.9rem;
				color: #666;
				margin-top: 0.5rem;
			}

			.payment-note {
				background: #f0f7ff;
				border: 1px solid #b3d9ff;
				border-radius: 4px;
				padding: 1rem;
				margin-bottom: 2rem;
				font-size: 0.9rem;
				color: #333;
			}

			.payment-note p {
				margin: 0;
			}

			.pay-button {
				width: 100%;
				background: #345E99;
				color: white;
				padding: 1rem;
				border: none;
				font-size: 1rem;
				font-weight: 600;
				cursor: pointer;
				transition: all 0.2s;
				border-radius: 4px;
			}

			.pay-button:hover:not(:disabled) {
				background: #2a4d7d;
			}

			.pay-button:disabled {
				opacity: 0.5;
				cursor: not-allowed;
			}

			.back-link {
				display: block;
				text-align: center;
				margin-top: 2rem;
				color: #345E99;
				text-decoration: none;
				font-weight: 500;
			}

			.back-link:hover {
				text-decoration: underline;
			}

			@media (max-width: 768px) {
				.payment-container {
					padding: 2rem 1rem;
				}

				h1 {
					font-size: 1.75rem;
				}

				.preset-amounts {
					grid-template-columns: 1fr;
				}
			}
		</style>
	</head>
	<body>
		<div class="payment-container">
			<h1>Support Youth Muay Thai</h1>

			<div class="preset-amounts">
				<button class="amount-button" data-amount="300">
					<div style="font-size: 1.25rem; font-weight: 600;">฿300</div>
					<div class="button-conversion" data-conversion="300"></div>
				</button>
				<button class="amount-button" data-amount="500">
					<div style="font-size: 1.25rem; font-weight: 600;">฿500</div>
					<div class="button-conversion" data-conversion="500"></div>
				</button>
				<button class="amount-button" data-amount="1000">
					<div style="font-size: 1.25rem; font-weight: 600;">฿1,000</div>
					<div class="button-conversion" data-conversion="1000"></div>
				</button>
			</div>

			<div class="custom-amount-section">
				<label for="custom-amount">Or Enter Custom Donation Amount (฿)</label>
				<input
					type="number"
					id="custom-amount"
					placeholder="Enter amount in Thai Baht"
					min="100"
					step="1"
				/>
			</div>

			<div class="selected-amount">
				<p>Selected Amount:</p>
				<div class="amount" id="display-amount">฿0</div>
				<div class="converted-amount" id="converted-amount"></div>
			</div>

			<div class="payment-note">
				<p><strong>Thank you for supporting our children's Muay Thai program!</strong> Your donation helps keep kids away from drugs through sports and discipline.</p>
				<p style="margin-top: 0.5rem; font-size: 0.85rem;">All donations are processed in Thai Baht (THB). Your bank will handle currency conversion if needed.</p>
			</div>

			<button class="pay-button" id="pay-button" disabled>
				Complete Donation
			</button>

			<a href="/" class="back-link">← Back to Home</a>
		</div>

		<script define:vars={{ OMISE_PUBLIC_KEY }}>
			// Initialize Omise with your public key

			let selectedAmount = 0;
			const amountButtons = document.querySelectorAll('.amount-button');
			const customAmountInput = document.getElementById('custom-amount');
			const displayAmount = document.getElementById('display-amount');
			const convertedAmountEl = document.getElementById('converted-amount');
			const payButton = document.getElementById('pay-button');

			// Currency conversion
			let exchangeRates = {};
			let userCurrency = 'USD'; // Default to USD

			// Detect user's currency from locale
			try {
				const locale = navigator.language || 'en-US';
				const currencyMap = {
					'en-US': 'USD',
					'en-GB': 'GBP',
					'en-AU': 'AUD',
					'en-CA': 'CAD',
					'en-NZ': 'NZD',
					'en-SG': 'SGD',
					'ja': 'JPY',
					'ko': 'KRW',
					'zh': 'CNY',
					'de': 'EUR',
					'fr': 'EUR',
					'es': 'EUR',
					'it': 'EUR'
				};
				userCurrency = currencyMap[locale] || currencyMap[locale.split('-')[0]] || 'USD';
			} catch (e) {
				userCurrency = 'USD';
			}

			// Fetch exchange rates
			async function fetchExchangeRates() {
				try {
					const response = await fetch('https://api.exchangerate-api.com/v4/latest/THB');
					const data = await response.json();
					exchangeRates = data.rates;
				} catch (error) {
					console.error('Failed to fetch exchange rates:', error);
					// Use fallback rates if API fails
					exchangeRates = {
						USD: 0.029,
						GBP: 0.023,
						EUR: 0.027,
						AUD: 0.045,
						CAD: 0.040,
						SGD: 0.039,
						JPY: 4.3,
						KRW: 39,
						CNY: 0.21,
						NZD: 0.049
					};
				}
				// Update button conversions after rates are loaded
				updateButtonConversions();
			}

			// Update conversion text on preset buttons
			function updateButtonConversions() {
				const conversionElements = document.querySelectorAll('.button-conversion');
				conversionElements.forEach(el => {
					const amount = parseInt(el.dataset.conversion);
					if (amount && exchangeRates[userCurrency]) {
						el.textContent = `≈ ${convertCurrency(amount)}`;
					}
				});
			}

			// Convert THB to user's currency
			function convertCurrency(thbAmount) {
				if (!exchangeRates[userCurrency]) return '';
				const converted = thbAmount * exchangeRates[userCurrency];
				const formatter = new Intl.NumberFormat('en-US', {
					style: 'currency',
					currency: userCurrency,
					minimumFractionDigits: 0,
					maximumFractionDigits: 0
				});
				return formatter.format(converted);
			}

			// Initialize exchange rates
			fetchExchangeRates();

			// Handle preset amount selection
			amountButtons.forEach(button => {
				button.addEventListener('click', () => {
					// Remove selected class from all buttons
					amountButtons.forEach(btn => btn.classList.remove('selected'));

					// Add selected class to clicked button
					button.classList.add('selected');

					// Clear custom amount input
					customAmountInput.value = '';

					// Set selected amount
					selectedAmount = parseInt(button.dataset.amount);
					updateDisplay();
				});
			});

			// Handle custom amount input
			customAmountInput.addEventListener('input', (e) => {
				// Remove selected class from all preset buttons
				amountButtons.forEach(btn => btn.classList.remove('selected'));

				// Set selected amount
				selectedAmount = parseInt(e.target.value) || 0;
				updateDisplay();
			});

			// Update display and enable/disable pay button
			function updateDisplay() {
				displayAmount.textContent = `฿${selectedAmount.toLocaleString()}`;

				// Show converted amount
				if (selectedAmount > 0 && exchangeRates[userCurrency]) {
					const converted = convertCurrency(selectedAmount);
					convertedAmountEl.textContent = `≈ ${converted}`;
				} else {
					convertedAmountEl.textContent = '';
				}

				payButton.disabled = selectedAmount < 100;
			}

			// Handle payment button click
			payButton.addEventListener('click', async () => {
				if (selectedAmount < 100) {
					alert('Please select or enter a valid amount (minimum ฿100)');
					return;
				}

				// Configure Omise
				OmiseCard.configure({
					publicKey: OMISE_PUBLIC_KEY,
					currency: 'THB',
					amount: selectedAmount * 100, // Omise uses smallest currency unit (satang)
					frameLabel: 'Dieselnoi Training'
				});

				// Open payment form
				OmiseCard.open({
					amount: selectedAmount * 100,
					currency: 'THB',
					defaultPaymentMethod: 'credit_card',
					onCreateTokenSuccess: async (token) => {
						try {
							// Send token to your backend
							const response = await fetch('/api/charge', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									token: token,
									amount: selectedAmount
								})
							});

							const result = await response.json();

							if (result.success) {
								window.location.href = '/payment-success';
							} else {
								alert('Payment failed: ' + result.error);
							}
						} catch (error) {
							alert('Payment error: ' + error.message);
						}
					},
					onFormClosed: () => {
						console.log('Payment form closed');
					}
				});
			});
		</script>
	</body>
</html>
